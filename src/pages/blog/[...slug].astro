---
import { SEO as Metadata } from 'astro-seo';
import type { Props as MetadataProps } from 'astro-seo';
import { Image, getImage } from 'astro:assets';
import { getEntry } from 'astro:content';
import sanitizeHtml from 'sanitize-html';
import AdjacentPosts from 'src/components/adjacent-posts.astro';
import PostInfo from 'src/components/post-info.astro';
import { siteName } from 'src/constants/site';
import SiteLayout from 'src/layouts/site-layout.astro';
import { getReadingTime } from 'src/utils/post';

const { slug = '' } = Astro.params;
const postEntry = await getEntry('posts', slug);
if (!postEntry) {
  return Astro.redirect('/404');
}

Astro.response.headers.set(
  'Cache-Control',
  's-maxage=1, stale-while-revalidate=2591999',
);

const { Content } = await postEntry.render();
const { image, publishedAt, summary, tags, title } = postEntry.data;
const metadataProps: MetadataProps = {
  title,
  titleTemplate: `%s | ${siteName}`,
  description: summary,
  openGraph: {
    basic: {
      title: `${title} | ${siteName}`,
      type: 'website',
      image: image
        ? new URL((await getImage(image)).src, Astro.url).toString()
        : new URL('/opengraph-image.png', Astro.url).toString(),
      url: Astro.url.href,
    },
  },
};
---

<SiteLayout>
  <Metadata slot="head" {...metadataProps} />
  <article>
    {
      !!image && (
        <figure>
          <picture>
            <Image src={image.src} alt={image.alt} />
          </picture>
          {!!image.credit && (
            <figcaption set:html={sanitizeHtml(image.credit)} />
          )}
        </figure>
      )
    }
    <Content />
    <PostInfo
      publishedAt={publishedAt}
      readingTime={getReadingTime(postEntry.body)}
      tags={tags}
    />
  </article>
  <AdjacentPosts slug={postEntry.slug} />
</SiteLayout>

<style lang="scss">
  @import '../../styles/variables.scss';

  figure {
    picture {
      width: 100%;
      aspect-ratio: 16 / 9;
      border-radius: 6px;
    }
    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: inherit;
      background-color: var(--color-light-gray);
    }
    figcaption {
      font-size: 0.8em;
      margin-top: 4px;
      text-align: center;

      @media (min-width: $tablet-min-width) {
        margin-top: 8px;
      }

      > :global(a) {
        text-underline-offset: 4px;
      }
    }
  }
  article {
    flex: 1 1 auto;
    display: flex;
    flex-direction: column;
    gap: 16px;
    padding: 42px 0;

    &:has(table) {
      overflow-x: hidden;
    }
    &:has(.table-wrapper) {
      overflow-x: visible;
    }

    @media (min-width: $tablet-min-width) {
      gap: 24px;
      font-size: 18px;
      line-height: 1.8;
      width: 100%;
      padding: 54px 0;
      margin: 0 auto;
    }

    > :global(h1) {
      order: -1;
    }
    > :global(.post-info) {
      order: -1;
    }

    // Markdown styles
    :global(a) {
      color: inherit;
      text-decoration: underline;
      text-underline-offset: 6px;
    }
    :global(blockquote) {
      display: flex;
      flex-direction: column;
      gap: 24px;
      font-size: 0.9em;
      padding: 16px 30px;
      border-left: 4px solid var(--color-quote-foreground);
      color: var(--color-quote-foreground);
      background-color: var(--color-quote-background);
      transition:
        background-color var(--transition-ease-in-out-250),
        border-color var(--transition-ease-in-out-250);

      :global(p) {
        white-space: pre-wrap;
      }
    }
    :global(code) {
      border-radius: 6px;
      font-size: 0.8em;
      font-family: ui-monospace, 'Cascadia Mono', 'Segoe UI Mono', 'Ubuntu Mono',
        'Roboto Mono', Menlo, Monaco, Consolas, monospace;
    }
    :global(:is(a, li, p)) {
      > :global(code) {
        display: inline-block;
        line-height: initial;
        padding: 2px 6px;
        color: var(--color-dark-gray);
        background-color: var(--color-light-gray);
        word-break: break-word;
      }
    }
    :global(pre) {
      padding: 16px 20px;
      border-radius: 6px;

      :global(code) {
        display: block;
      }
    }
    :global(h1) {
      @media (min-width: $tablet-min-width) {
        font-size: 1.75em;
      }
    }
    :global(:is(h1, h2, h3, h4, h5, h6)) {
      line-height: 1.4;
      font-weight: 600;
    }
    :global(hr) {
      border: 0;
      text-align: center;

      &::after {
        content: '・ ・ ・';
        display: inline-block;
      }
    }
    :global(img) {
      height: auto;
      margin: 0 auto;
      border-radius: 6px;
      background-color: var(--color-light-gray);
    }
    :global(pre) {
      width: 100%;
    }
    :global(.table-wrapper) {
      overflow: auto;
    }
    :global(table) {
      width: 100%;
      border-collapse: collapse;
    }
    :global(thead) {
      border-bottom: 1px solid var(--color-french-gray);
    }
    :global(:is(th, td)) {
      padding: 6px;
    }
  }
</style>

<script>
  document.querySelectorAll('table').forEach(preventOverflow);

  function preventOverflow(table: HTMLTableElement) {
    const wrapper = document.createElement('div');
    wrapper.classList.add('table-wrapper');
    table.parentNode?.insertBefore(wrapper, table);
    wrapper.appendChild(table);
  }
</script>
