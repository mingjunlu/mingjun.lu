---
import { Icon } from 'astro-icon/components';
---

<button
  disabled
  type="button"
  role="switch"
  aria-checked={undefined}
  aria-label="開啟深色模式"
  class="theme-toggle"
>
  {/* Presence controlled by CSS */}
  <Icon name="moon" class="moon-icon" />
  <Icon name="sun" class="sun-icon" />
</button>

<style lang="scss">
  button {
    all: unset;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 44px;
    height: 44px;
    transition: filter var(--transition-ease-in-150);
    filter: grayscale(0);
    cursor: pointer;

    &:disabled {
      filter: grayscale(1);
      cursor: not-allowed;
    }
  }
  .moon-icon {
    width: 18px;
    height: 18px;
    margin-left: 2px;
    transform-origin: center;

    &.animated {
      animation: moonrise 500ms cubic-bezier(0.87, 0, 0.13, 1);
    }
  }
  .sun-icon {
    width: 24px;
    height: 24px;
    transform-origin: center;

    &.animated {
      animation: sunrise 500ms cubic-bezier(0.87, 0, 0.13, 1);
    }
  }
  @keyframes moonrise {
    from {
      transform: rotate(-90deg);
      opacity: 0;
    }
    to {
      transform: rotate(0deg);
      opacity: 1;
    }
  }
  @keyframes sunrise {
    from {
      transform: rotate(90deg) scale(0.5);
      opacity: 0;
    }
    to {
      transform: rotate(0deg) scale(1);
      opacity: 1;
    }
  }
</style>

<script>
  import Cookies from 'js-cookie';
  import { defaultTheme, themeCookieOptions } from 'src/constants/theme';
  import { isDarkMode, isValidTheme } from 'src/utils/theme';

  const { documentElement } = document;
  const switchButton = document.querySelector('.theme-toggle');

  if (switchButton) {
    const theme = getTheme();
    if (isValidTheme(theme)) {
      switchButton.setAttribute('aria-checked', isDarkMode(theme).toString());
    } else {
      documentElement.setAttribute('data-theme', defaultTheme);
      switchButton.setAttribute('aria-checked', 'false');
    }
    switchButton.addEventListener('click', toggleTheme);
    switchButton.removeAttribute('disabled');
  }

  function toggleTheme() {
    const theme = getTheme();
    if (!isValidTheme(theme)) {
      return;
    }

    const themeColor = {
      light: window
        .getComputedStyle(documentElement)
        .getPropertyValue('--color-white'),
      dark: window
        .getComputedStyle(documentElement)
        .getPropertyValue('--color-arsenic-gray'),
    };
    const newTheme = isDarkMode(theme) ? 'light' : 'dark';
    document
      .querySelector('meta[name="theme-color"]')
      ?.setAttribute('content', themeColor[newTheme]);
    documentElement.setAttribute('data-theme', newTheme);
    switchButton?.setAttribute('aria-checked', isDarkMode(newTheme).toString());

    const iconSelector = {
      light: '.sun-icon',
      dark: '.moon-icon',
    };
    const iconToAnimate = documentElement.querySelector(iconSelector[newTheme]);
    if (iconToAnimate) {
      iconToAnimate.addEventListener(
        'animationend',
        () => {
          iconToAnimate.classList.remove('animated');
        },
        { once: true },
      );
      iconToAnimate.classList.add('animated');
    }

    Cookies.set('theme', newTheme, {
      ...themeCookieOptions,
      expires: 180, // Days
    });
  }
  function getTheme() {
    return documentElement.getAttribute('data-theme');
  }
</script>
